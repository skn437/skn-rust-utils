# Maximum width of an array literal before falling back to vertical formatting
array_width = 60
# Maximum width of the args of a function-like attributes before falling back to vertical formatting
attr_fn_like_width = 70
# Where to put a binary operator when a binary expression goes multiline
binop_separator = "Back"
# Minimum number of blank lines which must be put between items
blank_lines_lower_bound = 0
# Maximum number of blank lines which can be put between items
blank_lines_upper_bound = 1
# Brace style for items
brace_style = "PreferSameLine"
# Maximum width of a chain to fit on one line
chain_width = 60
# Whether to use colored output or not
color = "Always"
# Combine control expressions with function calls
combine_control_expr = false
# Maximum length of comments
comment_width = 60
# Replace strings of _ wildcards by a single .. in tuple patterns
condense_wildcard_suffixes = true
# Brace style for control flow constructs
control_brace_style = "AlwaysSameLine"
# Don't reformat anything
disable_all_formatting = false
# Specifies which edition is used by the parser
edition = "2021"
# Put empty-body functions and impls on a single line
empty_item_single_line = true
# The maximum length of enum variant having discriminant, that gets vertically aligned with others
enum_discrim_align_threshold = 20
# Error if unable to get all lines within `max_width`, except for comments and string literals
error_on_line_overflow = true
# Error if unable to get comments/string literals within `max_width`, or they are left with trailing whitespaces
error_on_unformatted = true
# Maximum width of the args of a function call before falling back to vertical formatting
fn_call_width = 60
# Control the layout of parameters in function signatures
fn_params_layout = "Tall"
# Put single-expression functions on a single line
fn_single_line = false
# Always print the abi for extern items
force_explicit_abi = true
# Force multiline closure and match arm bodies to be wrapped in a block
force_multiline_blocks = false
# Format code snippet included in doc comments
format_code_in_doc_comments = true
# Format generated files if any of the first five lines contain a `@generated` comment marker
format_generated_files = true
# Format the metavariable matching patterns in macros
format_macro_matchers = true
# Format the bodies of macros
format_macro_bodies = true
# Format string literals where necessary
format_strings = true
# Use tab characters for indentation, spaces for alignment
hard_tabs = false
# Control the case of the letters in hexadecimal literal values
hex_literal_case = "Upper"
# Do not show parse errors if the parser failed to parse files
hide_parse_errors = false
# Skip formatting files and directories that match the specified pattern
ignore = []
# Indent style of imports
imports_indent = "Block"
# Item layout inside an imports block
imports_layout = "HorizontalVertical"
# Indent on expressions or items
indent_style = "Block"
# Write an item and its attribute on the same line if their combined width is below a threshold
inline_attribute_width = 0
# Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line
match_arm_blocks = true
# Controls whether to include a leading pipe on match arms
match_arm_leading_pipes = "Preserve"
# Put a trailing comma after a block based match arm (non-block arms are not affected)
match_block_trailing_comma = true
# Maximum width of each line
max_width = 100
# Merge multiple derives into a single one
merge_derives = true
# Controls how imports are structured in `use` statements
imports_granularity = "Crate"
# Unix or Windows line endings
newline_style = "Unix"
# Convert `/* */` comments to `//` comments where possible
normalize_comments = true
# Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.
normalize_doc_attributes = true
# Allow structs, slices, arrays and block/array-like macros to overflow
overflow_delimited_expr = true
# Remove nested parens
remove_nested_parens = true
# Reorder impl items (`type` and `const` are put first, then macros and methods)
reorder_impl_items = true
# Reorder import and extern crate statements alphabetically in groups (a group is separated by a newline)
reorder_imports = true
# Controls the strategy for how consecutive imports are grouped together
group_imports = "StdExternalCrate"
# Reorder mod declarations alphabetically in group
reorder_modules = true
# Don't reformat out of line modules
skip_children = false
# Maximum line length for single line if-else expressions (<= `max-width`)
single_line_if_else_max_width = 50
# Leave a space after the colon
space_after_colon = true
# Leave a space before the colon
space_before_colon = false
# Put spaces around the `..`, `..=`, and `...` range operators
spaces_around_ranges = false
# The maximum diff of width between struct fields to be aligned with each other
struct_field_align_threshold = 20
# Put small struct literals on a single line
struct_lit_single_line = false
# Maximum width in the body of a struct literal before falling back to vertical formatting (<= `max-width`)
struct_lit_width = 18
# Maximum width in the body of a struct variant before falling back to vertical formatting (<= `max-width`)
struct_variant_width = 35
# Number of spaces per tab
tab_spaces = 2
# Handle trailing commas for lists
trailing_comma = "Vertical"
# Add trailing semicolon after `break`, `continue` and `return`
trailing_semicolon = true
# Determines if `+` or `=` are wrapped in spaces in the punctuation of types
type_punctuation_density = "Wide"
# Enable unstable features on the unstable channel
unstable_features = false
# Use field initialize shorthand if possible
use_field_init_shorthand = true
# Simplify the management and bulk updates of the granular width configuration settings
use_small_heuristics = "Default"
# Replace uses of the `try!` macro by the `?` shorthand
use_try_shorthand = true
# Forces the `where` clause to be laid out on a single line
where_single_line = false
# Break comments to fit on the line
wrap_comments = true
